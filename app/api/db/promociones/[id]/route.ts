import { NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"

// Simulaci√≥n de base de datos en memoria para promociones
const promocionesDB = new Map<string, any>()

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    // Verificar autenticaci√≥n
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "No autorizado" }, { status: 401 })
    }

    const id = params.id
    console.log(`üîç Obteniendo promoci√≥n con ID: ${id}`)

    // Buscar en la "base de datos" en memoria
    const promocion = promocionesDB.get(id)

    if (!promocion) {
      // Si no existe, crear una promoci√≥n de ejemplo basada en los datos de Shopify
      const promocionEjemplo = {
        id: id,
        titulo: "Promoci√≥n de prueba",
        descripcion: "Promoci√≥n de ejemplo",
        tipo: "PERCENTAGE_DISCOUNT",
        valor: 1,
        fechaInicio: new Date().toISOString(),
        fechaFin: null,
        codigo: null,
        activa: true,
        limitarUsos: false,
        limiteUsos: null,
        compraMinima: null,
      }

      promocionesDB.set(id, promocionEjemplo)
      console.log(`‚úÖ Promoci√≥n creada en memoria:`, promocionEjemplo)
      return NextResponse.json(promocionEjemplo)
    }

    console.log(`‚úÖ Promoci√≥n encontrada:`, promocion)
    return NextResponse.json(promocion)
  } catch (error) {
    console.error(`‚ùå Error al obtener promoci√≥n ${params.id}:`, error)
    return NextResponse.json({ error: "Error al obtener promoci√≥n" }, { status: 500 })
  }
}

export async function PUT(request: Request, { params }: { params: { id: string } }) {
  try {
    // Verificar autenticaci√≥n
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "No autorizado" }, { status: 401 })
    }

    const id = params.id
    const data = await request.json()

    console.log(`üìù Actualizando promoci√≥n ${id} con datos:`, data)

    // Validar datos requeridos
    if (!data.titulo) {
      return NextResponse.json({ error: "El t√≠tulo es obligatorio" }, { status: 400 })
    }

    // Preparar datos para actualizaci√≥n
    const promocionActualizada = {
      id: id,
      titulo: data.titulo,
      descripcion: data.descripcion || data.titulo,
      tipo: data.tipo || "PERCENTAGE_DISCOUNT",
      valor: data.valor ? Number.parseFloat(data.valor) : 0,
      fechaInicio: data.fechaInicio || new Date().toISOString(),
      fechaFin: data.fechaFin || null,
      codigo: data.codigo || null,
      activa: data.activa !== undefined ? data.activa : true,
      limitarUsos: data.limitarUsos || false,
      limiteUsos: data.limiteUsos ? Number.parseInt(data.limiteUsos) : null,
      compraMinima: data.compraMinima ? Number.parseFloat(data.compraMinima) : null,
      fechaActualizacion: new Date().toISOString(),
    }

    // Guardar en la "base de datos" en memoria
    promocionesDB.set(id, promocionActualizada)

    console.log(`‚úÖ Promoci√≥n actualizada exitosamente:`, promocionActualizada)
    return NextResponse.json(promocionActualizada)
  } catch (error) {
    console.error(`‚ùå Error al actualizar promoci√≥n ${params.id}:`, error)

    return NextResponse.json(
      {
        error: "Error al actualizar promoci√≥n",
        details: (error as Error).message,
      },
      { status: 500 },
    )
  }
}

export async function DELETE(request: Request, { params }: { params: { id: string } }) {
  try {
    // Verificar autenticaci√≥n
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "No autorizado" }, { status: 401 })
    }

    const id = params.id

    // Verificar que la promoci√≥n existe
    const promocion = promocionesDB.get(id)
    if (!promocion) {
      return NextResponse.json({ error: "Promoci√≥n no encontrada" }, { status: 404 })
    }

    // Eliminar promoci√≥n
    promocionesDB.delete(id)

    console.log(`‚úÖ Promoci√≥n eliminada: ${id}`)
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error(`‚ùå Error al eliminar promoci√≥n ${params.id}:`, error)
    return NextResponse.json({ error: "Error al eliminar promoci√≥n" }, { status: 500 })
  }
}
